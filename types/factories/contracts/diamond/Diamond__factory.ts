/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Diamond,
  DiamondInterface,
  IDiamondCut,
} from "../../../contracts/diamond/Diamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "diamondCutFacet",
            type: "address",
          },
          {
            internalType: "address",
            name: "diamondLoupeFacet",
            type: "address",
          },
          {
            internalType: "address",
            name: "erc165Facet",
            type: "address",
          },
          {
            internalType: "address",
            name: "erc173Facet",
            type: "address",
          },
        ],
        internalType: "struct Diamond.CoreFacets",
        name: "_coreFacets",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_facets",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "initContract",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "initData",
            type: "bytes",
          },
        ],
        internalType: "struct Diamond.Initialization[]",
        name: "_initializations",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "ErrDiamondFacetAlreadyExists",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523461075c57610e2c80380380610019816108b9565b92833981818101039160e0831261075c576080610035826108de565b93601f19011261075c5760405192608084016001600160401b0381118582101761066557604052610068602083016108de565b8452610076604083016108de565b6020850152610087606083016108de565b6040850152610098608083016108de565b606085015260a0820151916001600160401b03831161075c57838101601f84830101121561075c57828101516100d56100d0826108f2565b6108b9565b93602085838152019086840160208460051b83870101011161075c57602081850101915b60208460051b83870101018310610776575050505060c0810151936001600160401b03851161075c57808201601f86840101121561075c5784820151906101426100d0836108f2565b95602087848152019082850160208560051b83880101011161075c57602081860101915b60208560051b838801010183106106915750505050505061018561087b565b60018152602036818301376307e4c70760e21b806101a283610947565b526000908152600080516020610dec833981519152602052604090819020805460ff1916600117905551906001600160401b0360a08301908111908311176106655760a08201604052600482526080366020840137637a0ed62760e01b61020883610947565b526356fe50af60e11b61021a83610954565b526314bbdacb60e21b61022c83610964565b5281516003101561067b576366ffd66360e11b60808301526348e2b09360e01b600052600080516020610dec8339815191526020527f85baa9dc32e964e8db249342de5e5ef0ea04dd486a7533784720bf6eb00e25c3805460ff1916600117905561029561087b565b9060018252602036818401376301ffc9a760e01b6102b283610947565b52604051916001600160401b036080840190811190841117610665576103869761039e6060926103926103a6976080880160405260038852853660208a0137638da5cb5b60e01b61030289610947565b526338a80c5360e11b61031489610954565b5263f2fde38b60e01b61032689610964565b52630704183b60e11b600052600080516020610dec8339815191526020527f7c2dd16ed74ff046e5845bc4a8d08504db96c8326f82b23dbe3cc261ecb36252805460ff1916600117905584516001600160a01b039d8e98909189166109ad565b866020860151166109ad565b846040840151166109ad565b0151166109ad565b7fa7222481f8aff9c0b8c2a969dffbd3c91ebd3e9fb5b7b31128200b05480e8ab380546001600160a01b03191691851691909117905560005b815181101561041c5780610412856103fa6104179486610974565b51511660406104098487610974565b510151906109ad565b610988565b6103df565b505060005b815181101561065757826104358284610974565b51511660206104448385610974565b51015190806104cc5750516104615761045c90610988565b610421565b60405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608490fd5b8151156105ec57600091829130810361059b575b602082519201905af43d15610593573d906104fd6100d083610909565b9182523d6000602084013e5b15610518575061045c90610988565b80511561053f5760405162461bcd60e51b815290819061053b9060048301610ce1565b0390fd5b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b6064820152608490fd5b606090610509565b6105e76105a661089a565b602881527f4c69624469616d6f6e644375743a205f696e6974206164647265737320686173602082015267206e6f20636f646560c01b604082015282610d0d565b6104e0565b60405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608490fd5b60405160b99081610d338239f35b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8251906001600160401b03821161075c576040878401830186890103601f19011261075c5760408051929083016001600160401b03811184821017610761576040526106e3602082868b0101016108de565b8352878401810160400151906001600160401b03821161075c57848901010190858801603f8301121561075c576020820151906107226100d083610909565b93828552878a016040848601011161075c578461074b6020969487966040888098019101610924565b838201528152019301929050610166565b600080fd5b60246000634e487b7160e01b81526041600452fd5b82516001600160401b03811161075c57828601016060601f19828b890103011261075c5760405190606082016001600160401b03811183821017610761576040526107c3602082016108de565b82526040810151600381101561075c57602083015260608101516001600160401b03811161075c578a8801603f82840101121561075c576020818301015161080d6100d0826108f2565b9260208483815201908d8b0160408460051b86840101011161075c57604084820101915b60408460051b8684010101831061085a57505050505060408201528152602092830192016100f9565b82516001600160e01b03198116810361075c57815260209283019201610831565b60408051919082016001600160401b0381118382101761066557604052565b60405190606082016001600160401b0381118382101761066557604052565b6040519190601f01601f191682016001600160401b0381118382101761066557604052565b51906001600160a01b038216820361075c57565b6001600160401b0381116106655760051b60200190565b6001600160401b03811161066557601f01601f191660200190565b60005b8381106109375750506000910152565b8181015183820152602001610927565b80511561067b5760200190565b80516001101561067b5760400190565b80516002101561067b5760600190565b805182101561067b5760209160051b010190565b60001981146109975760010190565b634e487b7160e01b600052601160045260246000fd5b919091825115610c88576001600160a01b0392818416908115610c2e576001600160a01b0383166000908152600080516020610e0c83398151915260205260409020546001600160601b0392908316918215610b56575b6000925b8151841015610b4c57610a1b8483610974565b519063ffffffff60e01b8216806000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020908082526040918c83600020541680610b2f5750600084815282825283812080548f1660a088901b6001600160a01b0319908116919091179091556001600160a01b038d168252600080516020610e0c8339815191526020526040909120958b169695909493929190938454680100000000000000008110156106655760019788820180885582101561067b578b96600052836000208260031c019182549060e0809160051b1663ffffffff811b9384921c901b16911916179055600052526000209182541617905585821461099757610b29910193610988565b92610a08565b60449085855191631a2f0c8360e11b835260048301526024820152fd5b5050505050509050565b610b9e610b6161089a565b602481527f4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20602082015263636f646560e01b604082015286610d0d565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e805490816001610bee8960018060a01b0316600052600080516020610e0c833981519152602052604060002090565b015568010000000000000000821015610665576001820180825582101561067b576000908152602090200180546001600160a01b03191683179055610a04565b60405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608490fd5b60409160208252610d018151809281602086015260208686019101610924565b601f01601f1916010190565b3b15610d165750565b60405162461bcd60e51b815290819061053b9060048301610ce156fe6080604052361560aa57600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260408120546001600160a01b03168015606c57818091368280378136915af43d82803e156068573d90f35b3d90fd5b62461bcd60e51b6080526020608452602060a4527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460c45260646080fd5b00fea164736f6c6343000810000a0a438a7a1f9a2584bc07ed93973b0247d34f9a1fc8d1966afb5667f23e00fcb0c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d";

type DiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Diamond__factory extends ContractFactory {
  constructor(...args: DiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: PromiseOrValue<string>,
    _coreFacets: Diamond.CoreFacetsStruct,
    _facets: IDiamondCut.FacetCutStruct[],
    _initializations: Diamond.InitializationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Diamond> {
    return super.deploy(
      owner,
      _coreFacets,
      _facets,
      _initializations,
      overrides || {}
    ) as Promise<Diamond>;
  }
  override getDeployTransaction(
    owner: PromiseOrValue<string>,
    _coreFacets: Diamond.CoreFacetsStruct,
    _facets: IDiamondCut.FacetCutStruct[],
    _initializations: Diamond.InitializationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      owner,
      _coreFacets,
      _facets,
      _initializations,
      overrides || {}
    );
  }
  override attach(address: string): Diamond {
    return super.attach(address) as Diamond;
  }
  override connect(signer: Signer): Diamond__factory {
    return super.connect(signer) as Diamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInterface {
    return new utils.Interface(_abi) as DiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Diamond {
    return new Contract(address, _abi, signerOrProvider) as Diamond;
  }
}
