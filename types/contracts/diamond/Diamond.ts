/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";

import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Diamond {
  export type CoreFacetsStruct = {
    diamondCutFacet: PromiseOrValue<string>;
    diamondLoupeFacet: PromiseOrValue<string>;
    erc165Facet: PromiseOrValue<string>;
    erc173Facet: PromiseOrValue<string>;
  };

  export type CoreFacetsStructOutput = [string, string, string, string] & {
    diamondCutFacet: string;
    diamondLoupeFacet: string;
    erc165Facet: string;
    erc173Facet: string;
  };

  export type InitializationStruct = {
    initContract: PromiseOrValue<string>;
    initData: PromiseOrValue<BytesLike>;
  };

  export type InitializationStructOutput = [string, string] & {
    initContract: string;
    initData: string;
  };
}

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export interface DiamondInterface extends utils.Interface {
  functions: {};

  events: {};
}

export interface Diamond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {};

  estimateGas: {};

  populateTransaction: {};
}
