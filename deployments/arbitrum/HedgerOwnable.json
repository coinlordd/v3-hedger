{
  "address": "0xFA8fa584a5258D05C39D34334EeF6fa3C4a357d5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "addMasterAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetMasterAgreement",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callMasterAgreementOwner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deallocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deallocateAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndAllocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "updateCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAgreement",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x581e5f7ad675ebc39a8443fb77c86436d99078dfbb33dd3ab63cd4d75a37ba03",
  "receipt": {
    "to": null,
    "from": "0xeB73A6fB886c9e4C01F29da7B239e6E4Db0bf3aF",
    "contractAddress": "0xFA8fa584a5258D05C39D34334EeF6fa3C4a357d5",
    "transactionIndex": 1,
    "gasUsed": "5046687",
    "logsBloom": "0x
    "blockHash": "0x8b88edc647fb52a89bfc99cc3fba2ce88c342591282cc0bf0ceb77849cbf317e",
    "transactionHash": "0x581e5f7ad675ebc39a8443fb77c86436d99078dfbb33dd3ab63cd4d75a37ba03",
    "logs": [],
    "blockNumber": 48068080,
    "cumulativeGasUsed": "5046687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "39d9125f6b1c5391530fb9dfeef962af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"addMasterAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetMasterAgreement\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callMasterAgreementOwner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deallocateAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"updateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAgreement\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/hedger/HedgerOwnable.sol\":\"HedgerOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\n/**\\r\\n * @title Contract ownership standard interface (event only)\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\r\\n */\\r\\ninterface IERC173Events {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x075a53ed639ad1f9aab7f8ec66d69aae3104f3651de3682c1d1dca68e55973be\",\"license\":\"MIT\"},\"contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport { OwnableStorage } from \\\"./OwnableStorage.sol\\\";\\r\\nimport { IERC173Events } from \\\"./IERC173Events.sol\\\";\\r\\n\\r\\nabstract contract OwnableInternal is IERC173Events, Context {\\r\\n    using OwnableStorage for OwnableStorage.Layout;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _owner() internal view virtual returns (address) {\\r\\n        return OwnableStorage.layout().owner;\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address account) internal virtual {\\r\\n        OwnableStorage.layout().setOwner(account);\\r\\n        emit OwnershipTransferred(_msgSender(), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8f6e6196c0555ea058a13a597913cd8a747b7e2207bba57e3d0d4d7ed25471e\",\"license\":\"MIT\"},\"contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary OwnableStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.access.ownable\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOwner(Layout storage l, address owner) internal {\\r\\n        l.owner = owner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc471a7d1ef434c0ae90d2716897b02087235ca99767ca84f6e30d04589555435\",\"license\":\"MIT\"},\"contracts/hedger/HedgerInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { HedgerStorage } from \\\"./HedgerStorage.sol\\\";\\r\\nimport { IMasterAgreement } from \\\"./IMasterAgreement.sol\\\";\\r\\nimport { Errors } from \\\"../utils/errors.sol\\\";\\r\\n\\r\\nlibrary HedgerInternal {\\r\\n    using HedgerStorage for HedgerStorage.Layout;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function isMasterAgreement(address masterAgreement) internal view returns (bool) {\\r\\n        return HedgerStorage.layout().masterAgreementMap[masterAgreement];\\r\\n    }\\r\\n\\r\\n    function getCollateral(address masterAgreement) internal view returns (address) {\\r\\n        return HedgerStorage.layout().collateralMap[masterAgreement];\\r\\n    }\\r\\n\\r\\n    function getMasterAgreementContract(address masterAgreement) internal pure returns (IMasterAgreement) {\\r\\n        return IMasterAgreement(masterAgreement);\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    function addMasterAgreement(address masterAgreement, address collateral) internal {\\r\\n        bool exists = isMasterAgreement(masterAgreement);\\r\\n        require(!exists, \\\"MasterAgreement already exists\\\");\\r\\n\\r\\n        // Add MasterAgreement\\r\\n        HedgerStorage.layout().masterAgreementMap[masterAgreement] = true;\\r\\n\\r\\n        // Set the Collateral for this MasterAgreement\\r\\n        HedgerStorage.layout().collateralMap[masterAgreement] = collateral;\\r\\n\\r\\n        // Approve the Collateral\\r\\n        _approve(collateral, masterAgreement);\\r\\n\\r\\n        // Enlist ourselves in the MasterAgreement;\\r\\n        _enlist(masterAgreement);\\r\\n    }\\r\\n\\r\\n    function updateCollateral(address masterAgreement, address collateral) internal {\\r\\n        bool exists = isMasterAgreement(masterAgreement);\\r\\n        require(exists, \\\"MasterAgreement does not exist\\\");\\r\\n\\r\\n        // Set the Collateral for this MasterAgreement\\r\\n        HedgerStorage.layout().collateralMap[masterAgreement] = collateral;\\r\\n\\r\\n        // Approve the Collateral\\r\\n        _approve(collateral, masterAgreement);\\r\\n    }\\r\\n\\r\\n    /* ========== PUBLIC WRITES ========== */\\r\\n\\r\\n    function callExternal(address target, bytes calldata data) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory res) = target.call{ value: msg.value }(data);\\r\\n        if (!success) {\\r\\n            revert(Errors.getRevertMsg(res));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== PRIVATE WRITES ========== */\\r\\n\\r\\n    function _approve(address target, address spender) private {\\r\\n        IERC20(target).safeApprove(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function _enlist(address masterAgreement) private {\\r\\n        getMasterAgreementContract(masterAgreement).enlist();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49f730c167194bb467fe718c88f9355e8130a937455d75407c40f6e0c9525cce\",\"license\":\"MIT\"},\"contracts/hedger/HedgerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport { OwnableInternal } from \\\"../access/ownable/OwnableInternal.sol\\\";\\nimport { HedgerInternal } from \\\"./HedgerInternal.sol\\\";\\n\\ncontract HedgerOwnable is OwnableInternal {\\n    /* ========== SETTERS ========== */\\n\\n    function addMasterAgreement(address masterAgreement, address collateral) public onlyOwner {\\n        HedgerInternal.addMasterAgreement(masterAgreement, collateral);\\n    }\\n\\n    function updateCollateral(address masterAgreement, address collateral) public onlyOwner {\\n        HedgerInternal.updateCollateral(masterAgreement, collateral);\\n    }\\n\\n    /* ========== WRITES ========== */\\n\\n    function callMasterAgreementOwner(address targetMasterAgreement, bytes calldata data) external payable onlyOwner {\\n        HedgerInternal.callExternal(targetMasterAgreement, data);\\n    }\\n\\n    function withdrawETH() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = payable(_owner()).call{ value: balance }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function deposit(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).deposit(amount);\\n    }\\n\\n    function withdraw(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).withdraw(amount);\\n    }\\n\\n    function allocate(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).allocate(amount);\\n    }\\n\\n    function deallocate(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).deallocate(amount);\\n    }\\n\\n    function depositAndAllocate(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).depositAndAllocate(amount);\\n    }\\n\\n    function deallocateAndWithdraw(address masterAgreement, uint256 amount) external onlyOwner {\\n        HedgerInternal.getMasterAgreementContract(masterAgreement).deallocateAndWithdraw(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x42f14a0d4d35643917ec46b680054e7246c84d31e4311c241affcfe1d303cdac\",\"license\":\"MIT\"},\"contracts/hedger/HedgerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary HedgerStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.hedger.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        mapping(address => bool) masterAgreementMap;\\r\\n        mapping(address => address) collateralMap; // masterAgreement => collateral\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3820ddb098b93b3ed3ead339ce2f4a8509d2aba31660d0b6cf43fd7672e45d92\",\"license\":\"MIT\"},\"contracts/hedger/IMasterAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IMasterAgreement {\\r\\n    /* ========== ACCOUNTS - WRITES ========== */\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function allocate(uint256 amount) external;\\r\\n\\r\\n    function deallocate(uint256 amount) external;\\r\\n\\r\\n    function depositAndAllocate(uint256 amount) external;\\r\\n\\r\\n    function deallocateAndWithdraw(uint256 amount) external;\\r\\n\\r\\n    /* ========== ACCOUNTS - VIEWS ========== */\\r\\n\\r\\n    function getAccountBalance(address party) external view returns (uint256);\\r\\n\\r\\n    function getMarginBalance(address party) external view returns (uint256);\\r\\n\\r\\n    function getLockedMarginIsolated(address party, uint256 positionId) external view returns (uint256);\\r\\n\\r\\n    function getLockedMarginCross(address party) external view returns (uint256);\\r\\n\\r\\n    function getLockedMarginReserved(address party) external view returns (uint256);\\r\\n\\r\\n    /* ========== TRADES ========== */\\r\\n\\r\\n    function openPosition(uint256 rfqId, uint256 filledAmountUnits, uint256 avgPriceUsd, bytes16 uuid) external;\\r\\n\\r\\n    function closePosition(uint256 positionId, uint256 avgPriceUsd) external;\\r\\n\\r\\n    /* ========== MASTERAGREEMENT ========== */\\r\\n\\r\\n    function updateUuid(uint256 positionId, bytes16 uuid) external;\\r\\n\\r\\n    /* ========== HEDGERS ========== */\\r\\n\\r\\n    function enlist() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xcd38262c1a185018a140c3e9d187507fa0668c8c5c7ad68bc104f832dce758b1\",\"license\":\"MIT\"},\"contracts/utils/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary Errors {\\r\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8af1b0b14c6cf053693a2ef38141e52c48a217728894194f8a085c07018daea1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610d11908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c908163196bcfc0146100de5750806329ff1308146100d557806330efbe20146100cc57806347e7ef24146100c357806359db9eb0146100ba578063b78b52df146100b1578063cd3d8f01146100a8578063d9a9accb1461009f578063e086e5ec146100965763f3fef3a31461008e57600080fd5b61000e6106e9565b5061000e610656565b5061000e6105e5565b5061000e6104e7565b5061000e610476565b5061000e610405565b5061000e610394565b5061000e610301565b5061000e6101d6565b60403660031901126101a757806100f36101aa565b6024359067ffffffffffffffff8083116101a257366023840112156101a25782600401359081116101a25736602482850101116101a257839260249161015160018060a01b03600080516020610ce58339815191525416331461075a565b806040519384930183378101848152039134905af161016e610acf565b901561017a5750604051f35b61018661019e91610c2c565b60405162461bcd60e51b815291829160048301610bb3565b0390fd5b505050fd5b80fd5b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576101f06101aa565b6101f86101c0565b9061021b60018060a01b03600080516020610ce58339815191525416331461075a565b60ff610226826107a6565b541615610296578161028f610294936102708460018060a01b03166000527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6d602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6107df565b005b60405162461bcd60e51b815260206004820152601e60248201527f4d617374657241677265656d656e7420646f6573206e6f7420657869737400006044820152606490fd5b604090600319011261000e576004356001600160a01b038116810361000e579060243590565b503461000e57610310366102db565b600080516020610ce5833981519152546000928392916001600160a01b03919061033d908316331461075a565b16803b1561039057602483926040519485938492633c1deeaf60e11b845260048401525af18015610383575b610374575b50604051f35b61037d906108d0565b3861036e565b61038b61093e565b610369565b5050fd5b503461000e576103a3366102db565b600080516020610ce5833981519152546000928392916001600160a01b0391906103d0908316331461075a565b16803b156103905760248392604051948593849263b6b55f2560e01b845260048401525af18015610383576103745750604051f35b503461000e57610414366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610441908316331461075a565b16803b1561039057602483926040519485938492636f6c441f60e01b845260048401525af18015610383576103745750604051f35b503461000e57610485366102db565b600080516020610ce5833981519152546000928392916001600160a01b0391906104b2908316331461075a565b16803b15610390576024839260405194859384926390ca796b60e01b845260048401525af18015610383576103745750604051f35b503461000e57604036600319011261000e576105016101aa565b6105096101c0565b9061052c60018060a01b03600080516020610ce58339815191525416331461075a565b60ff610537826107a6565b54166105a05761059b816102949361054e826107a6565b805460ff191660011790556001600160a01b03821660009081527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6d6020526040902061028f908290610270565b610bdf565b60405162461bcd60e51b815260206004820152601e60248201527f4d617374657241677265656d656e7420616c72656164792065786973747300006044820152606490fd5b503461000e576105f4366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610621908316331461075a565b16803b1561039057602483926040519485938492636ed5e43160e11b845260048401525af18015610383576103745750604051f35b503461000e576000806003193601126101a757600080516020610ce5833981519152548190819081906001600160a01b031661069333821461075a565b47604051915af16106a2610acf565b50156106ad57604051f35b60405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b503461000e576106f8366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610725908316331461075a565b16803b1561039057602483926040519485938492632e1a7d4d60e01b845260048401525af18015610383576103745750604051f35b1561076157565b60405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606490fd5b6001600160a01b031660009081527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6c6020526040902090565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015261087c936108699390911691610877919061083790602081604481885afa9081156108ac575b60009161087e575b501561094b565b60405163095ea7b360e01b60208201526001600160a01b03909116602482015260001960448201529283906064820190565b03601f19810184528361090d565b6109e1565b565b61089f915060203d81116108a5575b610897818361090d565b81019061092f565b38610830565b503d61088d565b6108b461093e565b610828565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108e457604052565b6108ec6108b9565b604052565b6040810190811067ffffffffffffffff8211176108e457604052565b90601f8019910116810190811067ffffffffffffffff8211176108e457604052565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561095257565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b60209067ffffffffffffffff81116109d4575b601f01601f19160190565b6109dc6108b9565b6109c9565b60018060a01b031690610a406040516109f9816108f1565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1610a3a610acf565b91610aff565b805180610a4e575b50505050565b81849181010312610acb57820151908115918215036101a75750610a7457808080610a48565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b5080fd5b3d15610afa573d90610ae0826109b6565b91610aee604051938461090d565b82523d6000602084013e565b606090565b91929015610b615750815115610b13575090565b3b15610b1c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610b745750805190602001fd5b60405162461bcd60e51b815290819061019e9060048301610bb3565b60005b838110610ba35750506000910152565b8181015183820152602001610b93565b60409160208252610bd38151809281602086015260208686019101610b90565b601f01601f1916010190565b6001600160a01b0316803b1561000e5760008091600460405180948193631a12048160e01b83525af18015610c1f575b610c165750565b61087c906108d0565b610c2761093e565b610c0f565b6044815110610caa5760048101518101906020816024840193031261000e5760248101519067ffffffffffffffff821161000e57018160438201121561000e576024810151610c7a816109b6565b92610c88604051948561090d565b8184526044828401011161000e57610ca7916044602085019101610b90565b90565b50604051610cb7816108f1565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201529056fea7222481f8aff9c0b8c2a969dffbd3c91ebd3e9fb5b7b31128200b05480e8ab3a164736f6c6343000810000a",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c908163196bcfc0146100de5750806329ff1308146100d557806330efbe20146100cc57806347e7ef24146100c357806359db9eb0146100ba578063b78b52df146100b1578063cd3d8f01146100a8578063d9a9accb1461009f578063e086e5ec146100965763f3fef3a31461008e57600080fd5b61000e6106e9565b5061000e610656565b5061000e6105e5565b5061000e6104e7565b5061000e610476565b5061000e610405565b5061000e610394565b5061000e610301565b5061000e6101d6565b60403660031901126101a757806100f36101aa565b6024359067ffffffffffffffff8083116101a257366023840112156101a25782600401359081116101a25736602482850101116101a257839260249161015160018060a01b03600080516020610ce58339815191525416331461075a565b806040519384930183378101848152039134905af161016e610acf565b901561017a5750604051f35b61018661019e91610c2c565b60405162461bcd60e51b815291829160048301610bb3565b0390fd5b505050fd5b80fd5b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576101f06101aa565b6101f86101c0565b9061021b60018060a01b03600080516020610ce58339815191525416331461075a565b60ff610226826107a6565b541615610296578161028f610294936102708460018060a01b03166000527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6d602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6107df565b005b60405162461bcd60e51b815260206004820152601e60248201527f4d617374657241677265656d656e7420646f6573206e6f7420657869737400006044820152606490fd5b604090600319011261000e576004356001600160a01b038116810361000e579060243590565b503461000e57610310366102db565b600080516020610ce5833981519152546000928392916001600160a01b03919061033d908316331461075a565b16803b1561039057602483926040519485938492633c1deeaf60e11b845260048401525af18015610383575b610374575b50604051f35b61037d906108d0565b3861036e565b61038b61093e565b610369565b5050fd5b503461000e576103a3366102db565b600080516020610ce5833981519152546000928392916001600160a01b0391906103d0908316331461075a565b16803b156103905760248392604051948593849263b6b55f2560e01b845260048401525af18015610383576103745750604051f35b503461000e57610414366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610441908316331461075a565b16803b1561039057602483926040519485938492636f6c441f60e01b845260048401525af18015610383576103745750604051f35b503461000e57610485366102db565b600080516020610ce5833981519152546000928392916001600160a01b0391906104b2908316331461075a565b16803b15610390576024839260405194859384926390ca796b60e01b845260048401525af18015610383576103745750604051f35b503461000e57604036600319011261000e576105016101aa565b6105096101c0565b9061052c60018060a01b03600080516020610ce58339815191525416331461075a565b60ff610537826107a6565b54166105a05761059b816102949361054e826107a6565b805460ff191660011790556001600160a01b03821660009081527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6d6020526040902061028f908290610270565b610bdf565b60405162461bcd60e51b815260206004820152601e60248201527f4d617374657241677265656d656e7420616c72656164792065786973747300006044820152606490fd5b503461000e576105f4366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610621908316331461075a565b16803b1561039057602483926040519485938492636ed5e43160e11b845260048401525af18015610383576103745750604051f35b503461000e576000806003193601126101a757600080516020610ce5833981519152548190819081906001600160a01b031661069333821461075a565b47604051915af16106a2610acf565b50156106ad57604051f35b60405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b503461000e576106f8366102db565b600080516020610ce5833981519152546000928392916001600160a01b039190610725908316331461075a565b16803b1561039057602483926040519485938492632e1a7d4d60e01b845260048401525af18015610383576103745750604051f35b1561076157565b60405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606490fd5b6001600160a01b031660009081527f56864fc417ad9d57bfe3d7eb59ef81d3a7990ac33d9fb0584608b9f930c45b6c6020526040902090565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015261087c936108699390911691610877919061083790602081604481885afa9081156108ac575b60009161087e575b501561094b565b60405163095ea7b360e01b60208201526001600160a01b03909116602482015260001960448201529283906064820190565b03601f19810184528361090d565b6109e1565b565b61089f915060203d81116108a5575b610897818361090d565b81019061092f565b38610830565b503d61088d565b6108b461093e565b610828565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108e457604052565b6108ec6108b9565b604052565b6040810190811067ffffffffffffffff8211176108e457604052565b90601f8019910116810190811067ffffffffffffffff8211176108e457604052565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561095257565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b60209067ffffffffffffffff81116109d4575b601f01601f19160190565b6109dc6108b9565b6109c9565b60018060a01b031690610a406040516109f9816108f1565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1610a3a610acf565b91610aff565b805180610a4e575b50505050565b81849181010312610acb57820151908115918215036101a75750610a7457808080610a48565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b5080fd5b3d15610afa573d90610ae0826109b6565b91610aee604051938461090d565b82523d6000602084013e565b606090565b91929015610b615750815115610b13575090565b3b15610b1c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610b745750805190602001fd5b60405162461bcd60e51b815290819061019e9060048301610bb3565b60005b838110610ba35750506000910152565b8181015183820152602001610b93565b60409160208252610bd38151809281602086015260208686019101610b90565b601f01601f1916010190565b6001600160a01b0316803b1561000e5760008091600460405180948193631a12048160e01b83525af18015610c1f575b610c165750565b61087c906108d0565b610c2761093e565b610c0f565b6044815110610caa5760048101518101906020816024840193031261000e5760248101519067ffffffffffffffff821161000e57018160438201121561000e576024810151610c7a816109b6565b92610c88604051948561090d565b8184526044828401011161000e57610ca7916044602085019101610b90565b90565b50604051610cb7816108f1565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201529056fea7222481f8aff9c0b8c2a969dffbd3c91ebd3e9fb5b7b31128200b05480e8ab3a164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}